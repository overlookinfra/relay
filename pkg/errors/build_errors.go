// Package errors contains errors for the domain "rcli".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "rcli",
	Title: "Relay CLI",
}

// AuthSection defines a section of errors with the following scope:
// Authentication errors
var AuthSection = &impl.ErrorSection{
	Key:   "auth",
	Title: "Authentication errors",
}

// AuthFailedLoginErrorCode is the code for an instance of "failed_login_error".
const AuthFailedLoginErrorCode = "rcli_auth_failed_login_error"

// IsAuthFailedLoginError tests whether a given error is an instance of "failed_login_error".
func IsAuthFailedLoginError(err errawr.Error) bool {
	return err != nil && err.Is(AuthFailedLoginErrorCode)
}

// IsAuthFailedLoginError tests whether a given error is an instance of "failed_login_error".
func (External) IsAuthFailedLoginError(err errawr.Error) bool {
	return IsAuthFailedLoginError(err)
}

// AuthFailedLoginErrorBuilder is a builder for "failed_login_error" errors.
type AuthFailedLoginErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "failed_login_error" from this builder.
func (b *AuthFailedLoginErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not log in. Double-check username and password and try again.",
		Technical: "Could not log in. Double-check username and password and try again.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "failed_login_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     AuthSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Failed login error",
		Version:          1,
	}
}

// NewAuthFailedLoginErrorBuilder creates a new error builder for the code "failed_login_error".
func NewAuthFailedLoginErrorBuilder() *AuthFailedLoginErrorBuilder {
	return &AuthFailedLoginErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewAuthFailedLoginError creates a new error with the code "failed_login_error".
func NewAuthFailedLoginError() Error {
	return NewAuthFailedLoginErrorBuilder().Build()
}

// AuthFailedNoStdinCode is the code for an instance of "failed_no_stdin".
const AuthFailedNoStdinCode = "rcli_auth_failed_no_stdin"

// IsAuthFailedNoStdin tests whether a given error is an instance of "failed_no_stdin".
func IsAuthFailedNoStdin(err errawr.Error) bool {
	return err != nil && err.Is(AuthFailedNoStdinCode)
}

// IsAuthFailedNoStdin tests whether a given error is an instance of "failed_no_stdin".
func (External) IsAuthFailedNoStdin(err errawr.Error) bool {
	return IsAuthFailedNoStdin(err)
}

// AuthFailedNoStdinBuilder is a builder for "failed_no_stdin" errors.
type AuthFailedNoStdinBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "failed_no_stdin" from this builder.
func (b *AuthFailedNoStdinBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Did not receive anything from stdin.",
		Technical: "Did not receive anything from stdin.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "failed_no_stdin",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     AuthSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Did not receive from stdin error",
		Version:          1,
	}
}

// NewAuthFailedNoStdinBuilder creates a new error builder for the code "failed_no_stdin".
func NewAuthFailedNoStdinBuilder() *AuthFailedNoStdinBuilder {
	return &AuthFailedNoStdinBuilder{arguments: impl.ErrorArguments{}}
}

// NewAuthFailedNoStdin creates a new error with the code "failed_no_stdin".
func NewAuthFailedNoStdin() Error {
	return NewAuthFailedNoStdinBuilder().Build()
}

// AuthFailedPassFromStdinCode is the code for an instance of "failed_pass_from_stdin".
const AuthFailedPassFromStdinCode = "rcli_auth_failed_pass_from_stdin"

// IsAuthFailedPassFromStdin tests whether a given error is an instance of "failed_pass_from_stdin".
func IsAuthFailedPassFromStdin(err errawr.Error) bool {
	return err != nil && err.Is(AuthFailedPassFromStdinCode)
}

// IsAuthFailedPassFromStdin tests whether a given error is an instance of "failed_pass_from_stdin".
func (External) IsAuthFailedPassFromStdin(err errawr.Error) bool {
	return IsAuthFailedPassFromStdin(err)
}

// AuthFailedPassFromStdinBuilder is a builder for "failed_pass_from_stdin" errors.
type AuthFailedPassFromStdinBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "failed_pass_from_stdin" from this builder.
func (b *AuthFailedPassFromStdinBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read password from stdin.",
		Technical: "Could not read password from stdin.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "failed_pass_from_stdin",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     AuthSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Failed password from stdin",
		Version:          1,
	}
}

// NewAuthFailedPassFromStdinBuilder creates a new error builder for the code "failed_pass_from_stdin".
func NewAuthFailedPassFromStdinBuilder() *AuthFailedPassFromStdinBuilder {
	return &AuthFailedPassFromStdinBuilder{arguments: impl.ErrorArguments{}}
}

// NewAuthFailedPassFromStdin creates a new error with the code "failed_pass_from_stdin".
func NewAuthFailedPassFromStdin() Error {
	return NewAuthFailedPassFromStdinBuilder().Build()
}

// AuthMismatchedEmailPassMethodsCode is the code for an instance of "mismatched_email_pass_methods".
const AuthMismatchedEmailPassMethodsCode = "rcli_auth_mismatched_email_pass_methods"

// IsAuthMismatchedEmailPassMethods tests whether a given error is an instance of "mismatched_email_pass_methods".
func IsAuthMismatchedEmailPassMethods(err errawr.Error) bool {
	return err != nil && err.Is(AuthMismatchedEmailPassMethodsCode)
}

// IsAuthMismatchedEmailPassMethods tests whether a given error is an instance of "mismatched_email_pass_methods".
func (External) IsAuthMismatchedEmailPassMethods(err errawr.Error) bool {
	return IsAuthMismatchedEmailPassMethods(err)
}

// AuthMismatchedEmailPassMethodsBuilder is a builder for "mismatched_email_pass_methods" errors.
type AuthMismatchedEmailPassMethodsBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "mismatched_email_pass_methods" from this builder.
func (b *AuthMismatchedEmailPassMethodsBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "If you provide a password via --password-stdin you must provide your email as the first positional argument to `relay auth login`",
		Technical: "If you provide a password via --password-stdin you must provide your email as the first positional argument to `relay auth login`",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "mismatched_email_pass_methods",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     AuthSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Mismatched email and password passing methods",
		Version:          1,
	}
}

// NewAuthMismatchedEmailPassMethodsBuilder creates a new error builder for the code "mismatched_email_pass_methods".
func NewAuthMismatchedEmailPassMethodsBuilder() *AuthMismatchedEmailPassMethodsBuilder {
	return &AuthMismatchedEmailPassMethodsBuilder{arguments: impl.ErrorArguments{}}
}

// NewAuthMismatchedEmailPassMethods creates a new error with the code "mismatched_email_pass_methods".
func NewAuthMismatchedEmailPassMethods() Error {
	return NewAuthMismatchedEmailPassMethodsBuilder().Build()
}

// ClientSection defines a section of errors with the following scope:
// Client errors
var ClientSection = &impl.ErrorSection{
	Key:   "client",
	Title: "Client errors",
}

// ClientBadRequestBodyCode is the code for an instance of "bad_request_body".
const ClientBadRequestBodyCode = "rcli_client_bad_request_body"

// IsClientBadRequestBody tests whether a given error is an instance of "bad_request_body".
func IsClientBadRequestBody(err errawr.Error) bool {
	return err != nil && err.Is(ClientBadRequestBodyCode)
}

// IsClientBadRequestBody tests whether a given error is an instance of "bad_request_body".
func (External) IsClientBadRequestBody(err errawr.Error) bool {
	return IsClientBadRequestBody(err)
}

// ClientBadRequestBodyBuilder is a builder for "bad_request_body" errors.
type ClientBadRequestBodyBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "bad_request_body" from this builder.
func (b *ClientBadRequestBodyBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{message}}",
		Technical: "{{message}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "bad_request_body",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityBug,
		ErrorTitle:       "Bad request error body",
		Version:          1,
	}
}

// NewClientBadRequestBodyBuilder creates a new error builder for the code "bad_request_body".
func NewClientBadRequestBodyBuilder(message string) *ClientBadRequestBodyBuilder {
	return &ClientBadRequestBodyBuilder{arguments: impl.ErrorArguments{"message": impl.NewErrorArgument(message, "The response body of the failed client request")}}
}

// NewClientBadRequestBody creates a new error with the code "bad_request_body".
func NewClientBadRequestBody(message string) Error {
	return NewClientBadRequestBodyBuilder(message).Build()
}

// ClientCommandUnavailableInClientCode is the code for an instance of "command_unavailable_in_client".
const ClientCommandUnavailableInClientCode = "rcli_client_command_unavailable_in_client"

// IsClientCommandUnavailableInClient tests whether a given error is an instance of "command_unavailable_in_client".
func IsClientCommandUnavailableInClient(err errawr.Error) bool {
	return err != nil && err.Is(ClientCommandUnavailableInClientCode)
}

// IsClientCommandUnavailableInClient tests whether a given error is an instance of "command_unavailable_in_client".
func (External) IsClientCommandUnavailableInClient(err errawr.Error) bool {
	return IsClientCommandUnavailableInClient(err)
}

// ClientCommandUnavailableInClientBuilder is a builder for "command_unavailable_in_client" errors.
type ClientCommandUnavailableInClientBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "command_unavailable_in_client" from this builder.
func (b *ClientCommandUnavailableInClientBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The command {{command}} is not available in this client. You must use a config context that uses a cluster that supports this command.",
		Technical: "The command {{command}} is not available in this client. You must use a config context that uses a cluster that supports this command.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "command_unavailable_in_client",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Command unavailable in client",
		Version:          1,
	}
}

// NewClientCommandUnavailableInClientBuilder creates a new error builder for the code "command_unavailable_in_client".
func NewClientCommandUnavailableInClientBuilder(command string) *ClientCommandUnavailableInClientBuilder {
	return &ClientCommandUnavailableInClientBuilder{arguments: impl.ErrorArguments{"command": impl.NewErrorArgument(command, "The command that is unavailable")}}
}

// NewClientCommandUnavailableInClient creates a new error with the code "command_unavailable_in_client".
func NewClientCommandUnavailableInClient(command string) Error {
	return NewClientCommandUnavailableInClientBuilder(command).Build()
}

// ClientInternalErrorCode is the code for an instance of "internal_error".
const ClientInternalErrorCode = "rcli_client_internal_error"

// IsClientInternalError tests whether a given error is an instance of "internal_error".
func IsClientInternalError(err errawr.Error) bool {
	return err != nil && err.Is(ClientInternalErrorCode)
}

// IsClientInternalError tests whether a given error is an instance of "internal_error".
func (External) IsClientInternalError(err errawr.Error) bool {
	return IsClientInternalError(err)
}

// ClientInternalErrorBuilder is a builder for "internal_error" errors.
type ClientInternalErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "internal_error" from this builder.
func (b *ClientInternalErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "There was a problem executing your request.",
		Technical: "There was a problem executing your request.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "internal_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown error",
		Version:          1,
	}
}

// NewClientInternalErrorBuilder creates a new error builder for the code "internal_error".
func NewClientInternalErrorBuilder() *ClientInternalErrorBuilder {
	return &ClientInternalErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientInternalError creates a new error with the code "internal_error".
func NewClientInternalError() Error {
	return NewClientInternalErrorBuilder().Build()
}

// ClientInvalidEncodingTypeCode is the code for an instance of "invalid_encoding_type".
const ClientInvalidEncodingTypeCode = "rcli_client_invalid_encoding_type"

// IsClientInvalidEncodingType tests whether a given error is an instance of "invalid_encoding_type".
func IsClientInvalidEncodingType(err errawr.Error) bool {
	return err != nil && err.Is(ClientInvalidEncodingTypeCode)
}

// IsClientInvalidEncodingType tests whether a given error is an instance of "invalid_encoding_type".
func (External) IsClientInvalidEncodingType(err errawr.Error) bool {
	return IsClientInvalidEncodingType(err)
}

// ClientInvalidEncodingTypeBuilder is a builder for "invalid_encoding_type" errors.
type ClientInvalidEncodingTypeBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_encoding_type" from this builder.
func (b *ClientInvalidEncodingTypeBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{encoding}} is not a valid encoding type. Valid options are 'json' and 'yaml'.",
		Technical: "{{encoding}} is not a valid encoding type. Valid options are 'json' and 'yaml'.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_encoding_type",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityBug,
		ErrorTitle:       "Bad request error body",
		Version:          1,
	}
}

// NewClientInvalidEncodingTypeBuilder creates a new error builder for the code "invalid_encoding_type".
func NewClientInvalidEncodingTypeBuilder(encoding string) *ClientInvalidEncodingTypeBuilder {
	return &ClientInvalidEncodingTypeBuilder{arguments: impl.ErrorArguments{"encoding": impl.NewErrorArgument(encoding, "The provided encoding type")}}
}

// NewClientInvalidEncodingType creates a new error with the code "invalid_encoding_type".
func NewClientInvalidEncodingType(encoding string) Error {
	return NewClientInvalidEncodingTypeBuilder(encoding).Build()
}

// ClientRequestErrorCode is the code for an instance of "request_error".
const ClientRequestErrorCode = "rcli_client_request_error"

// IsClientRequestError tests whether a given error is an instance of "request_error".
func IsClientRequestError(err errawr.Error) bool {
	return err != nil && err.Is(ClientRequestErrorCode)
}

// IsClientRequestError tests whether a given error is an instance of "request_error".
func (External) IsClientRequestError(err errawr.Error) bool {
	return IsClientRequestError(err)
}

// ClientRequestErrorBuilder is a builder for "request_error" errors.
type ClientRequestErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "request_error" from this builder.
func (b *ClientRequestErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "There was a problem executing your request, please try again.",
		Technical: "There was a problem executing your request, please try again.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "request_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Request error",
		Version:          1,
	}
}

// NewClientRequestErrorBuilder creates a new error builder for the code "request_error".
func NewClientRequestErrorBuilder() *ClientRequestErrorBuilder {
	return &ClientRequestErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientRequestError creates a new error with the code "request_error".
func NewClientRequestError() Error {
	return NewClientRequestErrorBuilder().Build()
}

// ClientResponseNotFoundCode is the code for an instance of "response_not_found".
const ClientResponseNotFoundCode = "rcli_client_response_not_found"

// IsClientResponseNotFound tests whether a given error is an instance of "response_not_found".
func IsClientResponseNotFound(err errawr.Error) bool {
	return err != nil && err.Is(ClientResponseNotFoundCode)
}

// IsClientResponseNotFound tests whether a given error is an instance of "response_not_found".
func (External) IsClientResponseNotFound(err errawr.Error) bool {
	return IsClientResponseNotFound(err)
}

// ClientResponseNotFoundBuilder is a builder for "response_not_found" errors.
type ClientResponseNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "response_not_found" from this builder.
func (b *ClientResponseNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Response not found.",
		Technical: "Response not found.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "response_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Response not found error",
		Version:          1,
	}
}

// NewClientResponseNotFoundBuilder creates a new error builder for the code "response_not_found".
func NewClientResponseNotFoundBuilder() *ClientResponseNotFoundBuilder {
	return &ClientResponseNotFoundBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientResponseNotFound creates a new error with the code "response_not_found".
func NewClientResponseNotFound() Error {
	return NewClientResponseNotFoundBuilder().Build()
}

// ClientUnknownErrorCode is the code for an instance of "unknown_error".
const ClientUnknownErrorCode = "rcli_client_unknown_error"

// IsClientUnknownError tests whether a given error is an instance of "unknown_error".
func IsClientUnknownError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUnknownErrorCode)
}

// IsClientUnknownError tests whether a given error is an instance of "unknown_error".
func (External) IsClientUnknownError(err errawr.Error) bool {
	return IsClientUnknownError(err)
}

// ClientUnknownErrorBuilder is a builder for "unknown_error" errors.
type ClientUnknownErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_error" from this builder.
func (b *ClientUnknownErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An unexpected error occurred.",
		Technical: "An unexpected error occurred.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown error",
		Version:          1,
	}
}

// NewClientUnknownErrorBuilder creates a new error builder for the code "unknown_error".
func NewClientUnknownErrorBuilder() *ClientUnknownErrorBuilder {
	return &ClientUnknownErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUnknownError creates a new error with the code "unknown_error".
func NewClientUnknownError() Error {
	return NewClientUnknownErrorBuilder().Build()
}

// ClientUserNotAuthenticatedCode is the code for an instance of "user_not_authenticated".
const ClientUserNotAuthenticatedCode = "rcli_client_user_not_authenticated"

// IsClientUserNotAuthenticated tests whether a given error is an instance of "user_not_authenticated".
func IsClientUserNotAuthenticated(err errawr.Error) bool {
	return err != nil && err.Is(ClientUserNotAuthenticatedCode)
}

// IsClientUserNotAuthenticated tests whether a given error is an instance of "user_not_authenticated".
func (External) IsClientUserNotAuthenticated(err errawr.Error) bool {
	return IsClientUserNotAuthenticated(err)
}

// ClientUserNotAuthenticatedBuilder is a builder for "user_not_authenticated" errors.
type ClientUserNotAuthenticatedBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "user_not_authenticated" from this builder.
func (b *ClientUserNotAuthenticatedBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You must be logged in to perform this operation. Try `relay auth login`.",
		Technical: "You must be logged in to perform this operation. Try `relay auth login`.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "user_not_authenticated",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "User not authenticated error",
		Version:          1,
	}
}

// NewClientUserNotAuthenticatedBuilder creates a new error builder for the code "user_not_authenticated".
func NewClientUserNotAuthenticatedBuilder() *ClientUserNotAuthenticatedBuilder {
	return &ClientUserNotAuthenticatedBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUserNotAuthenticated creates a new error with the code "user_not_authenticated".
func NewClientUserNotAuthenticated() Error {
	return NewClientUserNotAuthenticatedBuilder().Build()
}

// ClientUserNotAuthorizedCode is the code for an instance of "user_not_authorized".
const ClientUserNotAuthorizedCode = "rcli_client_user_not_authorized"

// IsClientUserNotAuthorized tests whether a given error is an instance of "user_not_authorized".
func IsClientUserNotAuthorized(err errawr.Error) bool {
	return err != nil && err.Is(ClientUserNotAuthorizedCode)
}

// IsClientUserNotAuthorized tests whether a given error is an instance of "user_not_authorized".
func (External) IsClientUserNotAuthorized(err errawr.Error) bool {
	return IsClientUserNotAuthorized(err)
}

// ClientUserNotAuthorizedBuilder is a builder for "user_not_authorized" errors.
type ClientUserNotAuthorizedBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "user_not_authorized" from this builder.
func (b *ClientUserNotAuthorizedBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You are not authorized to perform this operation. If you believe this is a mistake, please contact your Relay administrator.",
		Technical: "You are not authorized to perform this operation. If you believe this is a mistake, please contact your Relay administrator.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "user_not_authorized",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "User not authorized error",
		Version:          1,
	}
}

// NewClientUserNotAuthorizedBuilder creates a new error builder for the code "user_not_authorized".
func NewClientUserNotAuthorizedBuilder() *ClientUserNotAuthorizedBuilder {
	return &ClientUserNotAuthorizedBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUserNotAuthorized creates a new error with the code "user_not_authorized".
func NewClientUserNotAuthorized() Error {
	return NewClientUserNotAuthorizedBuilder().Build()
}

// ConfigSection defines a section of errors with the following scope:
// CLI Config errors
var ConfigSection = &impl.ErrorSection{
	Key:   "config",
	Title: "CLI Config errors",
}

// ConfigFileNotFoundCode is the code for an instance of "file_not_found".
const ConfigFileNotFoundCode = "rcli_config_file_not_found"

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func IsConfigFileNotFound(err errawr.Error) bool {
	return err != nil && err.Is(ConfigFileNotFoundCode)
}

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func (External) IsConfigFileNotFound(err errawr.Error) bool {
	return IsConfigFileNotFound(err)
}

// ConfigFileNotFoundBuilder is a builder for "file_not_found" errors.
type ConfigFileNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "file_not_found" from this builder.
func (b *ConfigFileNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "No config file found at {{ path }}",
		Technical: "No config file found at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "file_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Config file not found",
		Version:          1,
	}
}

// NewConfigFileNotFoundBuilder creates a new error builder for the code "file_not_found".
func NewConfigFileNotFoundBuilder(path string) *ConfigFileNotFoundBuilder {
	return &ConfigFileNotFoundBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigFileNotFound creates a new error with the code "file_not_found".
func NewConfigFileNotFound(path string) Error {
	return NewConfigFileNotFoundBuilder(path).Build()
}

// ConfigInvalidAPIDomainCode is the code for an instance of "invalid_api_domain".
const ConfigInvalidAPIDomainCode = "rcli_config_invalid_api_domain"

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidAPIDomainCode)
}

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func (External) IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return IsConfigInvalidAPIDomain(err)
}

// ConfigInvalidAPIDomainBuilder is a builder for "invalid_api_domain" errors.
type ConfigInvalidAPIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_api_domain" from this builder.
func (b *ConfigInvalidAPIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided API Domain {{ domain }} is not a valid url.",
		Technical: "Provided API Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_api_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid API Domain",
		Version:          1,
	}
}

// NewConfigInvalidAPIDomainBuilder creates a new error builder for the code "invalid_api_domain".
func NewConfigInvalidAPIDomainBuilder(domain string) *ConfigInvalidAPIDomainBuilder {
	return &ConfigInvalidAPIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided api domain")}}
}

// NewConfigInvalidAPIDomain creates a new error with the code "invalid_api_domain".
func NewConfigInvalidAPIDomain(domain string) Error {
	return NewConfigInvalidAPIDomainBuilder(domain).Build()
}

// ConfigInvalidConfigFileCode is the code for an instance of "invalid_config_file".
const ConfigInvalidConfigFileCode = "rcli_config_invalid_config_file"

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func IsConfigInvalidConfigFile(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFileCode)
}

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func (External) IsConfigInvalidConfigFile(err errawr.Error) bool {
	return IsConfigInvalidConfigFile(err)
}

// ConfigInvalidConfigFileBuilder is a builder for "invalid_config_file" errors.
type ConfigInvalidConfigFileBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_file" from this builder.
func (b *ConfigInvalidConfigFileBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config file at {{ path }}",
		Technical: "Could not read config file at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_file",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config file",
		Version:          1,
	}
}

// NewConfigInvalidConfigFileBuilder creates a new error builder for the code "invalid_config_file".
func NewConfigInvalidConfigFileBuilder(path string) *ConfigInvalidConfigFileBuilder {
	return &ConfigInvalidConfigFileBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigInvalidConfigFile creates a new error with the code "invalid_config_file".
func NewConfigInvalidConfigFile(path string) Error {
	return NewConfigInvalidConfigFileBuilder(path).Build()
}

// ConfigInvalidConfigFlagCode is the code for an instance of "invalid_config_flag".
const ConfigInvalidConfigFlagCode = "rcli_config_invalid_config_flag"

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFlagCode)
}

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func (External) IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return IsConfigInvalidConfigFlag(err)
}

// ConfigInvalidConfigFlagBuilder is a builder for "invalid_config_flag" errors.
type ConfigInvalidConfigFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_flag" from this builder.
func (b *ConfigInvalidConfigFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config path. Value must be a valid filepath.",
		Technical: "Could not read config path. Value must be a valid filepath.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config flag",
		Version:          1,
	}
}

// NewConfigInvalidConfigFlagBuilder creates a new error builder for the code "invalid_config_flag".
func NewConfigInvalidConfigFlagBuilder() *ConfigInvalidConfigFlagBuilder {
	return &ConfigInvalidConfigFlagBuilder{arguments: impl.ErrorArguments{}}
}

// NewConfigInvalidConfigFlag creates a new error with the code "invalid_config_flag".
func NewConfigInvalidConfigFlag() Error {
	return NewConfigInvalidConfigFlagBuilder().Build()
}

// ConfigInvalidOutputFlagCode is the code for an instance of "invalid_output_flag".
const ConfigInvalidOutputFlagCode = "rcli_config_invalid_output_flag"

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidOutputFlagCode)
}

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func (External) IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return IsConfigInvalidOutputFlag(err)
}

// ConfigInvalidOutputFlagBuilder is a builder for "invalid_output_flag" errors.
type ConfigInvalidOutputFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_output_flag" from this builder.
func (b *ConfigInvalidOutputFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
		Technical: "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_output_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid output flag",
		Version:          1,
	}
}

// NewConfigInvalidOutputFlagBuilder creates a new error builder for the code "invalid_output_flag".
func NewConfigInvalidOutputFlagBuilder(out string) *ConfigInvalidOutputFlagBuilder {
	return &ConfigInvalidOutputFlagBuilder{arguments: impl.ErrorArguments{"out": impl.NewErrorArgument(out, "User provided output type")}}
}

// NewConfigInvalidOutputFlag creates a new error with the code "invalid_output_flag".
func NewConfigInvalidOutputFlag(out string) Error {
	return NewConfigInvalidOutputFlagBuilder(out).Build()
}

// ConfigInvalidUIDomainCode is the code for an instance of "invalid_ui_domain".
const ConfigInvalidUIDomainCode = "rcli_config_invalid_ui_domain"

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func IsConfigInvalidUIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidUIDomainCode)
}

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func (External) IsConfigInvalidUIDomain(err errawr.Error) bool {
	return IsConfigInvalidUIDomain(err)
}

// ConfigInvalidUIDomainBuilder is a builder for "invalid_ui_domain" errors.
type ConfigInvalidUIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_ui_domain" from this builder.
func (b *ConfigInvalidUIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided UI Domain {{ domain }} is not a valid url.",
		Technical: "Provided UI Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_ui_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid UI Domain",
		Version:          1,
	}
}

// NewConfigInvalidUIDomainBuilder creates a new error builder for the code "invalid_ui_domain".
func NewConfigInvalidUIDomainBuilder(domain string) *ConfigInvalidUIDomainBuilder {
	return &ConfigInvalidUIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided ui domain")}}
}

// NewConfigInvalidUIDomain creates a new error with the code "invalid_ui_domain".
func NewConfigInvalidUIDomain(domain string) Error {
	return NewConfigInvalidUIDomainBuilder(domain).Build()
}

// ConfigInvalidWebDomainCode is the code for an instance of "invalid_web_domain".
const ConfigInvalidWebDomainCode = "rcli_config_invalid_web_domain"

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func IsConfigInvalidWebDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidWebDomainCode)
}

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func (External) IsConfigInvalidWebDomain(err errawr.Error) bool {
	return IsConfigInvalidWebDomain(err)
}

// ConfigInvalidWebDomainBuilder is a builder for "invalid_web_domain" errors.
type ConfigInvalidWebDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_web_domain" from this builder.
func (b *ConfigInvalidWebDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided Web Domain {{ domain }} is not a valid url.",
		Technical: "Provided Web Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_web_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid Web Domain",
		Version:          1,
	}
}

// NewConfigInvalidWebDomainBuilder creates a new error builder for the code "invalid_web_domain".
func NewConfigInvalidWebDomainBuilder(domain string) *ConfigInvalidWebDomainBuilder {
	return &ConfigInvalidWebDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided web domain")}}
}

// NewConfigInvalidWebDomain creates a new error with the code "invalid_web_domain".
func NewConfigInvalidWebDomain(domain string) Error {
	return NewConfigInvalidWebDomainBuilder(domain).Build()
}

// GeneralSection defines a section of errors with the following scope:
// General errors
var GeneralSection = &impl.ErrorSection{
	Key:   "general",
	Title: "General errors",
}

// GeneralUnknownErrorCode is the code for an instance of "unknown_error".
const GeneralUnknownErrorCode = "rcli_general_unknown_error"

// IsGeneralUnknownError tests whether a given error is an instance of "unknown_error".
func IsGeneralUnknownError(err errawr.Error) bool {
	return err != nil && err.Is(GeneralUnknownErrorCode)
}

// IsGeneralUnknownError tests whether a given error is an instance of "unknown_error".
func (External) IsGeneralUnknownError(err errawr.Error) bool {
	return IsGeneralUnknownError(err)
}

// GeneralUnknownErrorBuilder is a builder for "unknown_error" errors.
type GeneralUnknownErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_error" from this builder.
func (b *GeneralUnknownErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An unexpected error occurred.",
		Technical: "An unexpected error occurred.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     GeneralSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown error",
		Version:          1,
	}
}

// NewGeneralUnknownErrorBuilder creates a new error builder for the code "unknown_error".
func NewGeneralUnknownErrorBuilder() *GeneralUnknownErrorBuilder {
	return &GeneralUnknownErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewGeneralUnknownError creates a new error with the code "unknown_error".
func NewGeneralUnknownError() Error {
	return NewGeneralUnknownErrorBuilder().Build()
}

// SecretSection defines a section of errors with the following scope:
// Secret errors
var SecretSection = &impl.ErrorSection{
	Key:   "secret",
	Title: "Secret errors",
}

// SecretFailedNoStdinCode is the code for an instance of "failed_no_stdin".
const SecretFailedNoStdinCode = "rcli_secret_failed_no_stdin"

// IsSecretFailedNoStdin tests whether a given error is an instance of "failed_no_stdin".
func IsSecretFailedNoStdin(err errawr.Error) bool {
	return err != nil && err.Is(SecretFailedNoStdinCode)
}

// IsSecretFailedNoStdin tests whether a given error is an instance of "failed_no_stdin".
func (External) IsSecretFailedNoStdin(err errawr.Error) bool {
	return IsSecretFailedNoStdin(err)
}

// SecretFailedNoStdinBuilder is a builder for "failed_no_stdin" errors.
type SecretFailedNoStdinBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "failed_no_stdin" from this builder.
func (b *SecretFailedNoStdinBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Did not receive anything from stdin.",
		Technical: "Did not receive anything from stdin.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "failed_no_stdin",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Did not receive from stdin error",
		Version:          1,
	}
}

// NewSecretFailedNoStdinBuilder creates a new error builder for the code "failed_no_stdin".
func NewSecretFailedNoStdinBuilder() *SecretFailedNoStdinBuilder {
	return &SecretFailedNoStdinBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretFailedNoStdin creates a new error with the code "failed_no_stdin".
func NewSecretFailedNoStdin() Error {
	return NewSecretFailedNoStdinBuilder().Build()
}

// SecretFailedValueFromStdinCode is the code for an instance of "failed_value_from_stdin".
const SecretFailedValueFromStdinCode = "rcli_secret_failed_value_from_stdin"

// IsSecretFailedValueFromStdin tests whether a given error is an instance of "failed_value_from_stdin".
func IsSecretFailedValueFromStdin(err errawr.Error) bool {
	return err != nil && err.Is(SecretFailedValueFromStdinCode)
}

// IsSecretFailedValueFromStdin tests whether a given error is an instance of "failed_value_from_stdin".
func (External) IsSecretFailedValueFromStdin(err errawr.Error) bool {
	return IsSecretFailedValueFromStdin(err)
}

// SecretFailedValueFromStdinBuilder is a builder for "failed_value_from_stdin" errors.
type SecretFailedValueFromStdinBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "failed_value_from_stdin" from this builder.
func (b *SecretFailedValueFromStdinBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read secret value from stdin.",
		Technical: "Could not read secret value from stdin.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "failed_value_from_stdin",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Failed value from stdin",
		Version:          1,
	}
}

// NewSecretFailedValueFromStdinBuilder creates a new error builder for the code "failed_value_from_stdin".
func NewSecretFailedValueFromStdinBuilder() *SecretFailedValueFromStdinBuilder {
	return &SecretFailedValueFromStdinBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretFailedValueFromStdin creates a new error with the code "failed_value_from_stdin".
func NewSecretFailedValueFromStdin() Error {
	return NewSecretFailedValueFromStdinBuilder().Build()
}

// SecretMissingNameErrorCode is the code for an instance of "missing_name_error".
const SecretMissingNameErrorCode = "rcli_secret_missing_name_error"

// IsSecretMissingNameError tests whether a given error is an instance of "missing_name_error".
func IsSecretMissingNameError(err errawr.Error) bool {
	return err != nil && err.Is(SecretMissingNameErrorCode)
}

// IsSecretMissingNameError tests whether a given error is an instance of "missing_name_error".
func (External) IsSecretMissingNameError(err errawr.Error) bool {
	return IsSecretMissingNameError(err)
}

// SecretMissingNameErrorBuilder is a builder for "missing_name_error" errors.
type SecretMissingNameErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_name_error" from this builder.
func (b *SecretMissingNameErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Please provide a workflow name.",
		Technical: "Please provide a workflow name.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_name_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing workflow name error",
		Version:          1,
	}
}

// NewSecretMissingNameErrorBuilder creates a new error builder for the code "missing_name_error".
func NewSecretMissingNameErrorBuilder() *SecretMissingNameErrorBuilder {
	return &SecretMissingNameErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretMissingNameError creates a new error with the code "missing_name_error".
func NewSecretMissingNameError() Error {
	return NewSecretMissingNameErrorBuilder().Build()
}

// SecretNameReadErrorCode is the code for an instance of "name_read_error".
const SecretNameReadErrorCode = "rcli_secret_name_read_error"

// IsSecretNameReadError tests whether a given error is an instance of "name_read_error".
func IsSecretNameReadError(err errawr.Error) bool {
	return err != nil && err.Is(SecretNameReadErrorCode)
}

// IsSecretNameReadError tests whether a given error is an instance of "name_read_error".
func (External) IsSecretNameReadError(err errawr.Error) bool {
	return IsSecretNameReadError(err)
}

// SecretNameReadErrorBuilder is a builder for "name_read_error" errors.
type SecretNameReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "name_read_error" from this builder.
func (b *SecretNameReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read secret name. Please supply a valid name.",
		Technical: "Could not read secret name. Please supply a valid name.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "name_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     SecretSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Secret name read error",
		Version:          1,
	}
}

// NewSecretNameReadErrorBuilder creates a new error builder for the code "name_read_error".
func NewSecretNameReadErrorBuilder() *SecretNameReadErrorBuilder {
	return &SecretNameReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewSecretNameReadError creates a new error with the code "name_read_error".
func NewSecretNameReadError() Error {
	return NewSecretNameReadErrorBuilder().Build()
}

// WorkflowSection defines a section of errors with the following scope:
// Workflow errors
var WorkflowSection = &impl.ErrorSection{
	Key:   "workflow",
	Title: "Workflow errors",
}

// WorkflowAlreadyExistsErrorCode is the code for an instance of "already_exists_error".
const WorkflowAlreadyExistsErrorCode = "rcli_workflow_already_exists_error"

// IsWorkflowAlreadyExistsError tests whether a given error is an instance of "already_exists_error".
func IsWorkflowAlreadyExistsError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowAlreadyExistsErrorCode)
}

// IsWorkflowAlreadyExistsError tests whether a given error is an instance of "already_exists_error".
func (External) IsWorkflowAlreadyExistsError(err errawr.Error) bool {
	return IsWorkflowAlreadyExistsError(err)
}

// WorkflowAlreadyExistsErrorBuilder is a builder for "already_exists_error" errors.
type WorkflowAlreadyExistsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "already_exists_error" from this builder.
func (b *WorkflowAlreadyExistsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "A workflow with the name provided already exists. Please provide a new name.",
		Technical: "A workflow with the name provided already exists. Please provide a new name.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "already_exists_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow name already exists",
		Version:          1,
	}
}

// NewWorkflowAlreadyExistsErrorBuilder creates a new error builder for the code "already_exists_error".
func NewWorkflowAlreadyExistsErrorBuilder() *WorkflowAlreadyExistsErrorBuilder {
	return &WorkflowAlreadyExistsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowAlreadyExistsError creates a new error with the code "already_exists_error".
func NewWorkflowAlreadyExistsError() Error {
	return NewWorkflowAlreadyExistsErrorBuilder().Build()
}

// WorkflowDoesNotExistErrorCode is the code for an instance of "does_not_exist_error".
const WorkflowDoesNotExistErrorCode = "rcli_workflow_does_not_exist_error"

// IsWorkflowDoesNotExistError tests whether a given error is an instance of "does_not_exist_error".
func IsWorkflowDoesNotExistError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowDoesNotExistErrorCode)
}

// IsWorkflowDoesNotExistError tests whether a given error is an instance of "does_not_exist_error".
func (External) IsWorkflowDoesNotExistError(err errawr.Error) bool {
	return IsWorkflowDoesNotExistError(err)
}

// WorkflowDoesNotExistErrorBuilder is a builder for "does_not_exist_error" errors.
type WorkflowDoesNotExistErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "does_not_exist_error" from this builder.
func (b *WorkflowDoesNotExistErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "A workflow with the name provided does not exist. Please choose an existing workflow.",
		Technical: "A workflow with the name provided does not exist. Please choose an existing workflow.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "does_not_exist_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow name does not exist",
		Version:          1,
	}
}

// NewWorkflowDoesNotExistErrorBuilder creates a new error builder for the code "does_not_exist_error".
func NewWorkflowDoesNotExistErrorBuilder() *WorkflowDoesNotExistErrorBuilder {
	return &WorkflowDoesNotExistErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowDoesNotExistError creates a new error with the code "does_not_exist_error".
func NewWorkflowDoesNotExistError() Error {
	return NewWorkflowDoesNotExistErrorBuilder().Build()
}

// WorkflowMissingFileFlagErrorCode is the code for an instance of "missing_file_flag_error".
const WorkflowMissingFileFlagErrorCode = "rcli_workflow_missing_file_flag_error"

// IsWorkflowMissingFileFlagError tests whether a given error is an instance of "missing_file_flag_error".
func IsWorkflowMissingFileFlagError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowMissingFileFlagErrorCode)
}

// IsWorkflowMissingFileFlagError tests whether a given error is an instance of "missing_file_flag_error".
func (External) IsWorkflowMissingFileFlagError(err errawr.Error) bool {
	return IsWorkflowMissingFileFlagError(err)
}

// WorkflowMissingFileFlagErrorBuilder is a builder for "missing_file_flag_error" errors.
type WorkflowMissingFileFlagErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_file_flag_error" from this builder.
func (b *WorkflowMissingFileFlagErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You must specify a workflow file with the --file flag.",
		Technical: "You must specify a workflow file with the --file flag.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_file_flag_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing file flag error",
		Version:          1,
	}
}

// NewWorkflowMissingFileFlagErrorBuilder creates a new error builder for the code "missing_file_flag_error".
func NewWorkflowMissingFileFlagErrorBuilder() *WorkflowMissingFileFlagErrorBuilder {
	return &WorkflowMissingFileFlagErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowMissingFileFlagError creates a new error with the code "missing_file_flag_error".
func NewWorkflowMissingFileFlagError() Error {
	return NewWorkflowMissingFileFlagErrorBuilder().Build()
}

// WorkflowMissingNameErrorCode is the code for an instance of "missing_name_error".
const WorkflowMissingNameErrorCode = "rcli_workflow_missing_name_error"

// IsWorkflowMissingNameError tests whether a given error is an instance of "missing_name_error".
func IsWorkflowMissingNameError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowMissingNameErrorCode)
}

// IsWorkflowMissingNameError tests whether a given error is an instance of "missing_name_error".
func (External) IsWorkflowMissingNameError(err errawr.Error) bool {
	return IsWorkflowMissingNameError(err)
}

// WorkflowMissingNameErrorBuilder is a builder for "missing_name_error" errors.
type WorkflowMissingNameErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_name_error" from this builder.
func (b *WorkflowMissingNameErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Please provide a workflow name.",
		Technical: "Please provide a workflow name.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_name_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing workflow name error",
		Version:          1,
	}
}

// NewWorkflowMissingNameErrorBuilder creates a new error builder for the code "missing_name_error".
func NewWorkflowMissingNameErrorBuilder() *WorkflowMissingNameErrorBuilder {
	return &WorkflowMissingNameErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowMissingNameError creates a new error with the code "missing_name_error".
func NewWorkflowMissingNameError() Error {
	return NewWorkflowMissingNameErrorBuilder().Build()
}

// WorkflowWorkflowFileReadErrorCode is the code for an instance of "workflow_file_read_error".
const WorkflowWorkflowFileReadErrorCode = "rcli_workflow_workflow_file_read_error"

// IsWorkflowWorkflowFileReadError tests whether a given error is an instance of "workflow_file_read_error".
func IsWorkflowWorkflowFileReadError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowWorkflowFileReadErrorCode)
}

// IsWorkflowWorkflowFileReadError tests whether a given error is an instance of "workflow_file_read_error".
func (External) IsWorkflowWorkflowFileReadError(err errawr.Error) bool {
	return IsWorkflowWorkflowFileReadError(err)
}

// WorkflowWorkflowFileReadErrorBuilder is a builder for "workflow_file_read_error" errors.
type WorkflowWorkflowFileReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "workflow_file_read_error" from this builder.
func (b *WorkflowWorkflowFileReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read workflow file. Check the path to the workflow file.",
		Technical: "Could not read workflow file. Check the path to the workflow file.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "workflow_file_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow file read error",
		Version:          1,
	}
}

// NewWorkflowWorkflowFileReadErrorBuilder creates a new error builder for the code "workflow_file_read_error".
func NewWorkflowWorkflowFileReadErrorBuilder() *WorkflowWorkflowFileReadErrorBuilder {
	return &WorkflowWorkflowFileReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowWorkflowFileReadError creates a new error with the code "workflow_file_read_error".
func NewWorkflowWorkflowFileReadError() Error {
	return NewWorkflowWorkflowFileReadErrorBuilder().Build()
}

// WorkflowWorkflowNameReadErrorCode is the code for an instance of "workflow_name_read_error".
const WorkflowWorkflowNameReadErrorCode = "rcli_workflow_workflow_name_read_error"

// IsWorkflowWorkflowNameReadError tests whether a given error is an instance of "workflow_name_read_error".
func IsWorkflowWorkflowNameReadError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowWorkflowNameReadErrorCode)
}

// IsWorkflowWorkflowNameReadError tests whether a given error is an instance of "workflow_name_read_error".
func (External) IsWorkflowWorkflowNameReadError(err errawr.Error) bool {
	return IsWorkflowWorkflowNameReadError(err)
}

// WorkflowWorkflowNameReadErrorBuilder is a builder for "workflow_name_read_error" errors.
type WorkflowWorkflowNameReadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "workflow_name_read_error" from this builder.
func (b *WorkflowWorkflowNameReadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read workflow name. Please supply a valid name.",
		Technical: "Could not read workflow name. Please supply a valid name.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "workflow_name_read_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow name read error",
		Version:          1,
	}
}

// NewWorkflowWorkflowNameReadErrorBuilder creates a new error builder for the code "workflow_name_read_error".
func NewWorkflowWorkflowNameReadErrorBuilder() *WorkflowWorkflowNameReadErrorBuilder {
	return &WorkflowWorkflowNameReadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowWorkflowNameReadError creates a new error with the code "workflow_name_read_error".
func NewWorkflowWorkflowNameReadError() Error {
	return NewWorkflowWorkflowNameReadErrorBuilder().Build()
}
